HECHO:

1) Corregir que player no sea mas singleton

1.1) Seteado el namespace RPG.GameCore para los managers del juego
1.2) Creada clase PlayerStatsManager para manejar los stats importantes a guardar del Player
1.3) Creada clase AutoSavePlayerStatsDataManager para manejar un pequeño autosave para actualizar el playerstatsmanager cada cierto período de tiempo
1.4) Implementadas las clases PlayerStatsManager y AutoSavePlayerStatsDataManager en el GameManager para que este vaya guardando y actualizando los datos necesarios del Player para que así este deje de ser singleton y asignar la información a un nuevo player cada vez que se avance de nivel
1.5) Los stats a guardar de PlayerStatsManager son:

- Salud y salud máxima
- Mana y mana máximo
- Listado de pociones
- Arma melee equipada, arma a distancia equipada y arma activa
- Posición del jugador

2) En el AIController cuando el enemigo es atacado por el player puede atacar automáticamente, sin importar la chaseDistance. Esto utilizando un EventManager que conecta la salud del enemigo que, al recibir un daño por el player, setea en true un booleano que detecta si fue atacado por el player para proceder a atacar.

NOTA: fue necesario agregar un id tanto en la salud del enemigo como en el controller debido a que si y solo si seteara en true la variable del script cuyo id sea igual al de la salud, con el fin de evitar que todos los scripts de AIController seteen la variable en true. De momento la id se setea en el inspector pero en un futuro se agregara un script que levante todos los AIController (array) de una escena y le seteara por medio de un for respecto a su indice en el mismo.

3) Corregido bug de que no funcionaba la fireball del Boss. Para esto se realizaron los siguientes cambios:

3.1) Se crearon MagicSpawners para que las magias al ser "equipadas" no deriven la responsabilidad de instanciar los hechizos en los spawners
3.2) Se creo un spawner para la MagicArea y MagicProjecile
3.3) Se creo en el MagicCaster un diccionario que setea el transform desde donde se instanciará el spawner según su tipo de magia:
- Si es magia en area, su transform será el transform del caster
- Si es magia de proyectil, su transform será (de momento) la mano derecha del caster

4) Corregido Feature de DamageTrigger. PAra esto se realizaron los siguientes cambios:
4.1) Se creo un DamageTrigger individual por cada personaje (jugador y enemigos)
4.2) El attackTrigger de las armas ahora seteará el DamageTrigger del personaje en lugar de uno propio. Además de que tendrá la información para setear el center y el size del boxCollider del DamageTrigger (además de setear el daño y demás)
4.3) Por último al atacar, el attackTrigger activa y desactiva el DamageTrigger del personaje

5) Corregido pequeño bug de que el fireball no se casteaba correctamente ya que era interrumpido por el ataque del boss, se solucionó con setear en EnemyCaster un booleano para que chequee si está casteando o no un hechizo. En el caso de que esté casteando no podrá atacar

6) Aplicado en MVC en Player reemplazando PlayerController (ahora renombrado como PlayerController Old) por PlayerMVC que funciona como User para manejar el Model, View y Controller del Player (PlayerModel, PlayerView y PlayerController).

PlayerController: Se encarga del manejo de Inputs y Raycasts del Player para que interactúe con el PlayerModel
PlayerModel: Se encarga de la lógica de interacción de Inputs del PlayerController
PlayerView: Controla el feedback visual y sonoro del Player
PlayerMVC: Maneja los updates, los eventos del PlayerModel y la integración del PlayerView al PlayerModel

Cosas a tener en cuenta:

- Surge una advertencia de "You are trying to create a MonoBehaviour using the 'new' keyword.  This is not allowed.  MonoBehaviours can only be added using AddComponent(). Alternatively, your script can inherit from ScriptableObject or no base class at all" en PlayerModel y PlayerView. Esto conlleva a que dentro de ambos scripts no pueda realizar acciones de MonoBehaviour tales como GetComponent, StartCoroutine, Invoke, etc ya que me genera un NullReferenceExcepcion. Por el momento está solucionado con el patrón EventManager en donde el PlayerMVC maneja eventos con acciones de MonoBehaviour, el PlayerModel y el PlayerView llaman a los eventos del PlayerMVC y así realizan sus acciones correctamente y no se genera el NullReference.

- El PlayerView aún está muy verde ya que gran parte del feedback visual y sonoro aún se ejecutan en scripts externos a los del PlayerMVC y derivados.

7) Aplicado Flyweight para stats de los enemigos y boss. Se  crearon los siguientes scripts: 

- EnemyFlyweight: Un struct que contiene las variables a utilizar para los enemiogs y boss
- EnemyFlyweightPointer: Un clase con readonlys de EnemyFlyweight que setearan distintos varlos de las variables a utilizar

Las variables a utilizar son las siguientes:
- movementSpeed: float que definirá la velocidad del movimiento en el NavMeshAgent del Moder del Enemigo/Boss
- chaseDistance: float que definirá la distancia a perseguir al Player
- attackers: un array de enteros que tendrá los layers que serán considerados como atacantes para el combatTarget a la hora de calcular daños
- damageRate: flotante que seteará cada cuanto tiempo puede recibir daño
- returnToWhiteColourTimer: flotante que seteará un tiempo para que el color del material base vuelva a ser blanco
- DeadTriggerName: string con el nombre del trigger a llamar por el animator cuando el enemigo/boss muera

Modificaciones en los scripts:
- Mover: Creada función SetNavMeshSpeed que pide un float para setear la velocidad del NaveMeshAgent. (Necesaria para setear la movementSpeed desde GuardAIController y StoneBossAIController)
- CombatTarget: Creada función SetAttackers que pide un array de ints para setear los attackers. (Necesaria para setear attackers desde AIController)
- GuardAIController: Se crearon las variables float _chaseDistanceModifier y _movementSpeedModifier que se sumarán al chaseDistance y al movementSpeed respectivamente seteados desde el Flyweight. Ahora la variable _chaseDistance será el resultado de la suma de chaseDistance de Flyweight y _chaseDistanceModifier. Y la variable speed a setear en SetNavMeshSpeed será el resultado de la suma de movementSpeed de Flyweight y _movementSpeedModifier.
- Health: Se modificó la función CoreStartingSettings por virtual y recibirá un params object[].
- Boss Health y Enemy Health: Se setearon funciones nuevas que recibirán parámetros del CoreStartingSettings(params object[]) las cuales se ejecutarán dentro del CoreStartingSettings de sus respectivos overrides y setearán las variables _damageRate, _returnToWhiteColourTimer y _deadTriggerName (Las cuales serán provistas desde StoneBossAIController y GuardAIController respectivamente con sus respectivas variables del Flyweight).

8) Aplicado Screen Manager (Detallar después)

9) Aplicado nuevo UI:

- Barras de Vida y Maná funcionan correctamente
- Aplicado nuevo método de inventario de items. Ahora es un panel de 6 celdas y, dependiendo el orden del diccionario de ItemInventory se setearán los items (ItemContainerUI) en cada celda del array de ItemInventoryMenu (ItemContainerUIs). El ItemContainerUI pedirá un sprite para setear una representación visual del item equipado en cuestión y un texto con la cantidad de unidades del mismo.
- 


BUGS:
1) Nullreference exception que sale con el sistema de layers
CORREGIDO: creado DamageTrigger que funciona de intermediario
entre el AttackTrigger y el CombatTarget
2) Error al setear la info del proyectil del hechizo de bola
de fuego del boss <Corregido>
3) En el PlayerMVC el PlayerModel y el PlayerView me sale un warning de:
"You are trying to create a MonoBehaviour using the 'new' keyword.  This is not allowed.  MonoBehaviours can only be added using AddComponent(). Alternatively, your script can inherit from ScriptableObject or no base class at all" y al querer realizar acciones de MonoBehaviour me sale NullReferenceError <Arreglado... Kinda>

En proceso:

1) Aplicar nueva UI

2) En lugar de abstract cambiar por virtual y aplicar base.Clase() a las clases vacías
3) Aplicación de ScreenManager para las pantallas de Gameplay, Pause e Inventory. Qué falta para terminar:

InventoryScreen: Modificar valores en scripts relacionados para mejorar su performance

PauseScreen: Modificar valores en scripts relacionados para mejorar su performance


4) Correcciones:

- Setear el array de ids para evitar el error del evento AIHasBeenAttacked
- Corregir errores que salten entre una escena y la otra

PATRONES

1) Ver Decorator, si no convence Localization Manager
2) MVC en los enemies y boss
3) Setear mas ObjectPools/Factories + Consultar al profe por pools con mismo script pero distinto gameObject (Buscar todo lo que tenga un Instantiate y cambiarlo por el patrón)